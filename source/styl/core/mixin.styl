
/**
 * Media
 *
 * +media('min', xl)                  => xl,sm,md,lg
 * +media('max', xl)                  => xs,xl
 * +media('in', xl)                   => xl
 * +media('in', xl, md)               => xl,sm,md
 * +media('out', xl)                  => xs, sm, md ,lg
 * +media('out', xl, sm)              => xs, md ,lg
 *
 */

media(type, arg...)
    $sizeName = {
       md: 3
       sm: 2
       xl: 1
       xs: 0
    }
    $sizeValue = 500px 768px 1000px 1260px

    if type == 'max'
        $media_where = '(max-width $sizeValue[$sizeName[arg[0]]] - 1)'

    else if type == 'min'
        $media_where = '(min-width $sizeValue[$sizeName[arg[0]] - 1])'

    else if type == 'in'
        $media_where_first = $sizeValue[$sizeName[arg[0]] - 1]
        $media_where_second = (length(arg) == 1) ? $sizeValue[$sizeName[arg[0]]] - 1 : $sizeValue[$sizeName[arg[1]]] - 1
        $media_where = '(min-width $media_where_first) and (max-width $media_where_second)'

    else if type == 'out'
        $media_where_first = $sizeValue[$sizeName[arg[0]] - 1] - 1
        $media_where_second = (length(arg) == 1) ? $sizeValue[$sizeName[arg[0]]] : $sizeValue[$sizeName[arg[1]]]
        $media_where = '(max-width $media_where_first), (min-width $media_where_second)'

    if $media_where
        @media $media_where
            {block}



 /**
  * Grid
  *
  * $grid()                  => .col{...}.w2{flex:0 50%;}
  * $grid('_postfix')        => .col{...}.w4_postfix{flex:0 25%;}
  *
  */

$grid(postfix = '')
    .w0{postfix}
        flex 1

    for i in 1..5
        .w{i}{postfix}
            flex 0 (1/i) * 100%



/*
 * Order
 *
 * $order()                 => .o1{order:1;}
 * $order('_postfix')       => .o2_postfix{order:2;}
 *
 */

$order(postfix = '')
    for i in 1..12
        .o{i}{postfix}
            order i



/**
 * Offset
 *
 * offset 1 of 10           => margin-left:10%;
 * $offset()                => .os1-2{margin-left:50%;}
 * $offset('_postfix')      => .os1-4{margin-left:25%;}
 *
 */

offset(arg...)
    margin-left (arg[0]/arg[2])*100%

$offset(postfix = '')
    .os0-0{postfix}
        margin-left 0

    for i in 1...12
        for j in i+1..12
            .os{i}-{j}{postfix}
                margin-left (i/j) * 100%



/**
 * Gradient
 *
 * gradient(180deg, red, green)
 * gradient(270deg, red, green 50%, blue)
 *
 */

gradient($direction, $colors...)
    background $colors[0][0]
    background linear-gradient($direction, unquote(join(', ', $colors)))



/**
 * Reset float
 *
 * clearfix()
 *
 */

clearfix()
    &::before
    &::after
        display block
        content ''

    &::after
        clear both



/**
 * Position
 *
 * static()                       => position:static;
 * absolute(top)                  => position:absolute;top:0;
 * relative top                   => position:relative;top:0;
 * fixed top 10px left right      => position:fixed;top:10px;left:0;right:0;
 *
 */

-pos(type, args)
    position: unquote(type)
    $direction = top right bottom left
    for arg, i in args
        if arg in $direction
            {arg}: (args[i + 1] is a 'unit') ? args[i + 1] : 0

static()
    -pos('static', arguments)
relative()
    -pos('relative', arguments)
absolute()
    -pos('absolute', arguments)
fixed()
    -pos('fixed', arguments)


/**
 * Size
 *
 * size 10px               => width:10px; height:10px
 * size 10px 15px          => width:10px; height:15px
 *
 */

size(arg...)
    if arg && length(arg) == 1
        width arg[0]
        height arg[0]

    else if length(arg) == 2
        width arg[0]
        height arg[1]



/**
 * Border-radius
 *
 * border-radius()            => border-radius:3px
 * border-radius 50%          => border-radius:50%
 * border-radius 0 5px        => border-radius:0 5px
 *
 */

border-radius()
    if length(arguments)
        border-radius arguments

    else if $site_border-radius
        border-radius $site_border-radius



/**
 * Overflow
 *
 * overflow ellipsis
 *
 */

overflow(key)
    if key == ellipsis
        overflow hidden
        text-overflow ellipsis
        white-space nowrap
    else
        overflow key
